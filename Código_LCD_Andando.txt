/*
 * File:   Core.c
 * Author: fedearo@hotmail.com
 *
 * Created on 4/24/2018 3:43:59 PM UTC
 * "Created in MPLAB Xpress"
 */

#include <stdio.h>
#include <stdlib.h>
#define _XTAL_FREQ 20000000
#include <xc.h>

#define FCY (_XTAL_FREQ/4)

#pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = ON       // RE3/MCLR pin function select bit (RE3/MCLR pin function is MCLR)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown Out Reset Selection bits (BOR enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal/External Switchover mode is enabled)
#pragma config FCMEN = ON       // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is enabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

void ConfigIni (void);
void ConfigLCD (void);
unsigned int Voltaje = 0;
unsigned char a = 0;
float VoltajeMuestra = 0;
void pulsoenable (void);

unsigned char linea1[16] = {'\0'};
unsigned char linea2[16] = {'\0'};
void EnviarLCD (char v1);//Función para enviar comando de medio byte al LCD
void ComandoLCD (char v2);//Función para enviar comando al LCD
void EscribirLCD (char v3);//Función para enviar datos al LCD
void StringLCD (char *c);//Función para enviar una cadena de caracteres (STRING) al LCD
void antepuerto (void);
void selector (void);

void interrupt rutinainterrupciones(void)
{
    if(PIR1bits.ADIF == 1)
    {
        PIR1bits.ADIF = 0;/*flag-down*//*go_ndone->0 cuando entra en la interrupcion*/
        Voltaje = ADRESH;
        Voltaje = (Voltaje << 2);
        //ADRESL = ADRESL && 0x03;
        Voltaje = Voltaje + ADRESL;
        __delay_us(26);
        ADCON0bits.GO_nDONE = 1;
        if (PORTCbits.RC0 == 1 && a == 0)
        {
            ADCON0bits.CHS0 = !ADCON0bits.CHS0;/*AN0*//*AN1*/
            a = 1;
        }
        if (PORTCbits.RC0 == 0 && a == 1)
        {
            a = 0;
        }
        VoltajeMuestra = Voltaje;
    }
}

/*Conexionado.PNG*/

void main(void)
{
    ConfigIni();
    ConfigLCD();
    ADCON0bits.CHS0 = 0;/*ïnicializo usando AN0*/
//    sprintf(linea1," Voltimetro - AN0 %03d");
//    StringLCD("Voltaje");
    while(1)
    {
    //     sprintf(linea2,Voltaje); //guardamos en el string Buffer1 la palabra Cuenta espacio y el valor de i
    EnviarLCD(0x00);
    EnviarLCD(0x01);
    EnviarLCD(0x02);
    EnviarLCD(0x03);
    EnviarLCD(0x04);
    EnviarLCD(0x05);
    EnviarLCD(0x06);
    EnviarLCD(0x07);
    EnviarLCD(0x08);
    EnviarLCD(0x09);
    EnviarLCD(0x0A);
    EnviarLCD(0x0B);
    EnviarLCD(0x0C);
    EnviarLCD(0x0D);
    EnviarLCD(0x0E);
    EnviarLCD(0x0F);
    EnviarLCD(0x10);
    EnviarLCD(0x11);
    EnviarLCD(0x12);
    EnviarLCD(0x13);
    EnviarLCD(0x14);
    EnviarLCD(0x15);
    EnviarLCD(0x16);
    EnviarLCD(0x17);
    EnviarLCD(0x18);
    EnviarLCD(0x19);
    EnviarLCD(0x1A);
    EnviarLCD(0x1B);
    EnviarLCD(0x1C);
    EnviarLCD(0x1D);
    EnviarLCD(0x1E);
    EnviarLCD(0x1F);
    EnviarLCD(0x20);
    EnviarLCD(0x21);
    }
}

void EnviarLCD(char data_bit)
//https://stackoverflow.com/questions/16239846/reading-single-bit-from-a-char
//typedef -> https://stackoverflow.com/questions/8584577/access-bits-in-a-char-in-c/8584614#8584614
#define BIT(x,n) (((x) >> (n)) & 0x01)
{
    PORTBbits.RB6 = 1;/*RS*/
    PORTBbits.RB5 = 0;/*R/W*/
    data_bit = data_bit + 0b00110000;
    PORTBbits.RB0 = BIT(data_bit, 7);
    PORTBbits.RB1 = BIT(data_bit, 6);
    PORTBbits.RB2 = BIT(data_bit, 5);
    PORTBbits.RB3 = BIT(data_bit, 4);
    pulsoenable();
    PORTBbits.RB0 = BIT(data_bit, 3);
    PORTBbits.RB1 = BIT(data_bit, 2);
    PORTBbits.RB2 = BIT(data_bit, 1);
    PORTBbits.RB3 = BIT(data_bit, 0);
    pulsoenable();
    __delay_ms(50);
}

void ConfigIni(void)
{
    ANSEL = 0x03;/*RA0 RA1*/
    ANSELH = 0x00;
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    ADCON0bits.ADON = 1;/*enableADC*/
    TRISAbits.TRISA0 = 1;/*RA0 input*/
    TRISAbits.TRISA1 = 1;/*RA1 input*/
    TRISB = 0b00000000;/*PORTB output*/
    ADCON1bits.ADFM = 0;/*10bits -> 8 MVB van a ADRESH y los 2 LVB van a 7 y 6 de ADRESL*/
    ADCON1bits.VCFG1 = 0;/*Vref*/
    ADCON1bits.VCFG0 = 0;/*Vref*/
    PIR1bits.ADIF = 0;/*flag=0*/
    PIE1bits.ADIE = 1;/*enableADCinterruption*/	
    ADCON0bits.ADCS1 = 1;/*fcyADC*/
    ADCON0bits.ADCS0 = 0;/*fcyADC*/
    TRISCbits.TRISC0 = 1;/*input pulsador RC0*/
    PORTCbits.RC0 = 0;
    ADCON0bits.CHS3 = 0;/**/
    ADCON0bits.CHS2 = 0;/*multiplexerbits*/
    ADCON0bits.CHS1 = 0;/**/
    a = 0;
}

void ConfigLCD(void)
{
    //inicialización
    __delay_ms(100);/*delayinicialización*/
    //PORTBbits.RB6 = 0;/*RS*/
    //PORTBbits.RB5 = 0;/*R/W*/
    PORTBbits.RB6 = 0;/*RS*/
    PORTBbits.RB5 = 0;/*R/W*/
    //PORTBbits.RB0 = 0;/*DB7*/
    //PORTBbits.RB1 = 0;/*DB6*/
    //PORTBbits.RB2 = 0;/*DB5*/
    //PORTBbits.RB3 = 0;/*DB4*/
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 1;/*DB5*/
    PORTBbits.RB3 = 1;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 1;/*DB5*/
    PORTBbits.RB3 = 1;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 1;/*DB5*/
    PORTBbits.RB3 = 1;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 1;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 1;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
        PORTBbits.RB0 = 1;/*DB7*/
        PORTBbits.RB1 = 0;/*DB6*/
        PORTBbits.RB2 = 0;/*DB5*/
        PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 0;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
        PORTBbits.RB0 = 1;/*DB7*/
        PORTBbits.RB1 = 1;/*DB6*/
        /*cursor*/
        PORTBbits.RB2 = 1;/*DB5*/
        /*blinker*/
        PORTBbits.RB3 = 1;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 0;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
        PORTBbits.RB0 = 0;/*DB7*/
        PORTBbits.RB1 = 1;/*DB6*/
        PORTBbits.RB2 = 1;/*DB5*/
        PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 0;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
        PORTBbits.RB0 = 0;/*DB7*/
        PORTBbits.RB1 = 0;/*DB6*/
        PORTBbits.RB2 = 0;/*DB5*/
        PORTBbits.RB3 = 1;/*DB4*/
    pulsoenable();
    PORTBbits.RB0 = 0;/*DB7*/
    PORTBbits.RB1 = 0;/*DB6*/
    PORTBbits.RB2 = 0;/*DB5*/
    PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
        PORTBbits.RB0 = 0;/*DB7*/
        PORTBbits.RB1 = 0;/*DB6*/
        PORTBbits.RB2 = 1;/*DB5*/
        PORTBbits.RB3 = 0;/*DB4*/
    pulsoenable();
}

void pulsoenable(void)
{
	PORTBbits.RB4 = 1;/*E*/
	__delay_us(15);
	PORTBbits.RB4 = 0;/*E*/
	__delay_us(15);
}
